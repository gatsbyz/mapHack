angular
  .module('mapHack')
  .controller('MapIndexController', MapIndexController);

MapIndexController.$inject = ['$http', 'cheatsService', '$window'];


function MapIndexController($http, cheatsService, $window) {
 	var vm = this;

    var map = [];

    vm.cheats = [];
    vm.currentUser = {};
    vm.userArray = [];
    vm.deleteCheat = deleteCheat;

    var mark= {};
    var closestMarker = null;

    var cheatMarkersArray = [];
    var eol = null;

    var polyline = null;
    var poly2 = null;

    vm.animate = animate;

    onLoad();

    function onLoad() {
        cheatsService
            .getCheats()
            .then(function(res){
                console.log(res)
                vm.cheats = res.data.cheats;
                vm.currentUser = res.data.currentUser.id;
                vm.userArray = res.data.user_array;
                drawCheats(vm.cheats);
        });
    }

	initAutocomplete();

    function deleteCheat(cheat) {
        var id = cheat.id
        cheatsService
            .deleteCheat(id)
            .then(function(res){
                console.log('Your cheat has been deleted')
                $window.location.reload();
            })
    }

	function calculateRoute(from, to) {
        var geocoder =  new google.maps.Geocoder();
        geocoder.geocode( { 'address': from}, function(results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
                find_closest_marker({lat:results[0].geometry.location.lat(),lng:results[0].geometry.location.lng()});
                } else {
                alert("Something got wrong " + status);
              }
        });

        var directionsService = new google.maps.DirectionsService();
        var directionsRequest = {
          origin: from,
          destination: to,
          travelMode: google.maps.DirectionsTravelMode.DRIVING,
          unitSystem: google.maps.UnitSystem.METRIC
        };
        directionsService.route(
          directionsRequest,
          function(response, status)
          {
            if (status == google.maps.DirectionsStatus.OK)
            {
                var rendererOptions = {
                    map: map
                }
                directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
                directionsDisplay.setDirections(response);
                var bounds = new google.maps.LatLngBounds();
                var route = response.routes[0];
                startLocation = new Object();
                endLocation = new Object();

                // For each route, display summary information.
                var path = response.routes[0].overview_path;
                var legs = response.routes[0].legs;

                polyline = new google.maps.Polyline({
                path: [],
                strokeColor: '#FF0000',
                strokeWeight: 3
                });
                for (i=0;i<legs.length;i++) {
                    if (i == 0) { 
                        startLocation.latlng = legs[i].start_location;
                        startLocation.address = legs[i].start_address;
                        // marker = google.maps.Marker({map:map,position: startLocation.latlng});
                        marker = createMarker(legs[i].start_location,"start",legs[i].start_address,"green");
                    }
                    endLocation.latlng = legs[i].end_location;
                    endLocation.address = legs[i].end_address;
                    var steps = legs[i].steps;
                    for (j=0;j<steps.length;j++) {
                        var nextSegment = steps[j].path;
                        for (k=0;k<nextSegment.length;k++) {
                            polyline.getPath().push(nextSegment[k]);
                            bounds.extend(nextSegment[k]);
                        }
                    }
                }

                polyline.setMap(map);
                map.fitBounds(bounds);
                //        createMarker(endLocation.latlng,"end",endLocation.address,"red");
                map.setZoom(18);
                startAnimation();


                new google.maps.DirectionsRenderer({
                    map: map,
                    directions: response
                });
            }
            else
              $("#error").append("Unable to retrieve your route<br />");
          }
        );
    }

    function drawCheats(cheats) {
        cheats.forEach(function(cheat,index) {
            var latLng = {lat: cheat.start_point_lat, lng: cheat.start_point_long};
            var marker = new google.maps.Marker({
                position: latLng,
                map: map,
            });

            var infowindow = new google.maps.InfoWindow({
                content: "<div><a href=\"/cheat/" + cheat.id + "\">See This Hack</a></div>"
            });

            marker.addListener('click', function() {
                infowindow.open(map, marker);
            });

            cheatMarkersArray.push(marker);
        });
    }

    $(document).ready(function() {
    // If the browser supports the Geolocation API
        if (typeof navigator.geolocation == "undefined") {
            $("#error").text("Your browser doesn't support the Geolocation API");
            return;
        }

        $("#from-link, #to-link").click(function(event) {
            event.preventDefault();
            var addressId = this.id.substring(0, this.id.indexOf("-"));

            navigator.geolocation.getCurrentPosition(function(position) {
                var geocoder = new google.maps.Geocoder();
                geocoder.geocode({
                    "location": new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
                },
                function(results, status) {
                    if (status == google.maps.GeocoderStatus.OK)
                        $("#" + addressId).val(results[0].formatted_address);
                    else
                        $("#error").append("Unable to retrieve your address<br />");
                });
            },
            function(positionError){
                $("#error").append("Error: " + positionError.message + "<br />");
            },
            {
                enableHighAccuracy: true,
                timeout: 10 * 1000 // 10 seconds
            });
        });

        $("#calculate-route").submit(function(event) {
            event.preventDefault();
            calculateRoute($("#from").val(), $("#to").val());
        });
    });

    function rad(x) {return x*Math.PI/180;}
    function find_closest_marker( latLng ) {
        var lat = latLng.lat;
        var lng = latLng.lng;
        var R = 6371; // radius of earth in km
        var distances = [];
        var closest = -1;
        for( i=0;i<cheatMarkersArray.length; i++ ) {
            var mlat = cheatMarkersArray[i].position.lat();
            var mlng = cheatMarkersArray[i].position.lng();
            var dLat  = rad(mlat - lat);
            var dLong = rad(mlng - lng);
            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(rad(lat)) * Math.cos(rad(lat)) * Math.sin(dLong/2) * Math.sin(dLong/2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            var d = R * c;
            distances[i] = d;
            if ( closest == -1 || d < distances[closest] ) {
                closest = i;
            }
        }

        closestMarker = cheatMarkersArray[closest];
    }
	

	function initAutocomplete() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: -33.8688, lng: 151.2195},
            zoom: 13,
            mapTypeId: 'roadmap'
        });

        //google.maps.event.addListener(map, 'click', find_closest_marker);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();
        if (places.length == 0) {
            return;
        }

        // Clear out the old markers.
        markers.forEach(function(marker) {
            marker.setMap(null);
        });
        markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
        if (!place.geometry) {
            console.log("Returned place contains no geometry");
            return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
        });
          map.fitBounds(bounds);
        });
      }

    function createMarker(latlng, label, html) {
    // alert("createMarker("+latlng+","+label+","+html+","+color+")");
        var contentString = '<b>'+label+'</b><br>'+html;
        mark = new google.maps.Marker({
            position: latlng,
            map: map,
            title: label,
            zIndex: Math.round(latlng.lat()*-100000)<<5
            });
        mark.myname = label;
            // gmarkers.push(marker);

        return mark;
    }

    function startAnimation() {
        eol=polyline.Distance();
        map.setCenter(polyline.getPath().getAt(0));
        // map.addOverlay(new google.maps.Marker(polyline.getAt(0),G_START_ICON));
        // map.addOverlay(new GMarker(polyline.getVertex(polyline.getVertexCount()-1),G_END_ICON));
        // marker = new google.maps.Marker({location:polyline.getPath().getAt(0)} /* ,{icon:car} */);
        // map.addOverlay(marker);
        poly2 = new google.maps.Polyline({path: [polyline.getPath().getAt(0)], strokeColor:"#0000FF", strokeWeight:10});
        // map.addOverlay(poly2);
        setTimeout(function() { animate(50); },1000);  // Allow time for the initial map display
    }

    function animate(d) {
        if (d>eol) {
          map.panTo(endLocation.latlng);
          mark.setPosition(endLocation.latlng);
          return;
        }
        var p = polyline.GetPointAtDistance(d);
        //map.panTo(p);
        mark.setPosition(p);
        updatePoly(d);

        setTimeout(function() { animate(d+50); }, 100);
    }

    function updatePoly(d) {
        // Spawn a new polyline every 20 vertices, because updating a 100-vertex poly is too slow
        if (poly2.getPath().getLength() > 20) {
          poly2=new google.maps.Polyline([polyline.getPath().getAt(1-1)]);
          // map.addOverlay(poly2)
        }

        if (polyline.GetIndexAtDistance(d) < 1+2) {
           if (poly2.getPath().getLength()>1) {
             poly2.getPath().removeAt(poly2.getPath().getLength()-1)
           }
           poly2.getPath().insertAt(poly2.getPath().getLength(),polyline.GetPointAtDistance(d));
        } else {
          poly2.getPath().insertAt(poly2.getPath().getLength(),endLocation.latlng);
        }
      }

}