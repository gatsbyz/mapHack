angular
    .module('mapHack')
    .controller('CheatNewController', CheatNewController);

CheatNewController.$inject = ['$state','$http', 'cheatsService'];

function CheatNewController($state, $http, cheatsService) {
 	var vm = this;

    vm.cheat = {
        description:'',
        start_point_lat: 0,
        start_point_long: 0,
        end_point_lat: 0,
        end_point_long: 0,
    };

	initAutocomplete();

    vm.clearOverlays = clearOverlays;
    vm.saveCheat = saveCheat;

    var markersArray = [];

	function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: -33.8688, lng: 151.2195},
            zoom: 13,
            mapTypeId: 'roadmap'
        });

        map.addListener('click', function(e) {
            placeMarker(e.latLng, map);
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
      }

    function placeMarker(latLng, map) {
        var marker = new google.maps.Marker({
            position: latLng,
            map: map
        });
        markersArray.push(marker);
        //map.panTo(latLng);
        console.log(marker);
    }

    function clearOverlays() {
        for (var i = 0; i < markersArray.length; i++ ) {
            markersArray[i].setMap(null);
        }
        markersArray.length = 0;
    }

    function saveCheat() {

        markersArray.forEach(function(element,index) {
            if (index == 0) {
                console.log(element.position);
                vm.cheat.start_point_lat = element.position.lat();
                vm.cheat.start_point_long = element.position.lng();
            } else {
                vm.cheat.end_point_lat = element.position.lat();
                vm.cheat.end_point_long = element.position.lng();

            } 
        });
        console.log(vm.cheat);

        cheatsService
          .createCheat(vm.cheat)
          .then(function(res) {
            if(res.status == 201) {
              // $state.go('cheatShow') // cheat detail page
            } else {
              alert('Something went wrong. check your inputs again');
            };
          });
      };
}